#!/bin/bash
#
# This builds all tests using testmanifest
# Tamio-Vesa Nakajima

#################################
# Build necesisties
#################################

cd eval || exit
make -s
cd .. || exit

cd okgen || exit
make -s
cd .. || exit

cd ingen || exit
make -s
cd .. || exit

#################################
# PROBLEM CONFIGURATION
#################################

# initialize problemconfig variables
problemname=""
timelimit=""

# shellcheck disable=SC1091
source problemconfig

# Check if problemconfig variables are set
if [ -z "$problemname" ] || [ -z "$timelimit" ] ; then
    echo Bad config file
    exit 1
fi

############################
# ARGUMENT PARSING
#############################

rebuild_inputs=true

while getopts "r:ho" opt; do
    case $opt in
        h)  # Help:
            echo "Usage: ./run -r(estore) [revision to restore]"
            exit 0
            ;;
        r)  # Restore old revision
            rm -r tests
            unzip "oldtests/$OPTARG.zip"
            exit 0
            ;;
        o)  # DO only the ok's again
            rebuild_inputs=false
            ;;
        *)
            echo "Bad options"
            exit 1
            ;;
    esac
done


############################
# Building tests
############################

# Get test revision name
read -p "Name of this test revision: " -r testrevision

# For all lines of the test manifest:
currtest=0
while read -r instr; do
    # Parse a line of testmanifest

    # shellcheck disable=SC2086
    set $instr
    numberoftests=$1
    incf=$2
    totalpoints=$3

    # Get the number of points per test
    points=$((totalpoints / numberoftests))

    # For all tests of this kind:
    for ((nr=$"currtest"; nr<"$currtest"+"$numberoftests" ; nr++)) ; do
        (
        echo Building test "$nr"

        if [ $rebuild_inputs = true ] ; then
            ./lib/build_test_number "$nr" "$incf"
        fi

        ./lib/build_ok_number "$nr" "$points"

        echo Done test "$nr"
        ) &
    done

    #update currtest
    currtest=$((currtest + numberoftests))
done < testmanifest

wait

# Store this revision in oldtests
if [ -n "$testrevision" ] ; then
    zip -r "oldtests/$testrevision.zip" tests/*
fi
